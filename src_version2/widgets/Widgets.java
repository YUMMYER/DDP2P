/* ------------------------------------------------------------------------- */
/*   Copyright (C) 2012 Marius C. Silaghi
		Author: Marius Silaghi: msilaghi@fit.edu
		Florida Tech, Human Decision Support Systems Laboratory
   
       This program is free software; you can redistribute it and/or modify
       it under the terms of the GNU Affero General Public License as published by
       the Free Software Foundation; either the current version of the License, or
       (at your option) any later version.
   
      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.
  
      You should have received a copy of the GNU Affero General Public License
      along with this program; if not, write to the Free Software
      Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.              */
/* ------------------------------------------------------------------------- */
package widgets;

/*

page 12:
the size of representation is between 2
->
the size of the representation is between 2

with several tree structures including Red-Black tree whose major operations 
->
with several tree structures, including Red-Black trees, whose major operations 

page 13:
The proposed method was experimentally evaluated. We used Leximin AMODCOPs shown in Subsection 3.1. Each problem consists
->
In our experiments with Leximin AMODCOPs (see Subsection 3.1) each problem consists


The constraint network is randomly generated based on spanning trees and additional edges.
-> (?)
The constraint network is randomly generated by first creating a spanning trees and then adding additional edges.

For each assignment, objective function fi,j(xi,xj) takes a integer
->
For each assignment, the objective function fi,j(xi,xj) returns an integer

For each type of problem, 25 instances were averaged.
->
For each type of problem, the results are averaged over 25 instances.
  

I recommend to prepare an itemized list with the names of the algorithm versions at the mottom of the page 13 as it is difficult to follow them inline.

page 14:
from its message queue, then the agent updates its status and sends messages if necessary.
->
from its message queue. Then the agent updates its status and sends messages (if necessary).

The number of cut- off cycle is 50000
->
A simulation is interrupted after a number of 50000 cycles.

consider several operations that refers a (partial) assignment
->
consider several operations that involve a (partial) assignment

the case of tree while those are less effective for cyclic networks.
->
the case of trees and less effective for cyclic networks.

This reveals the needs for more better bounding methods, similar to conventional DCOP solvers.
->
This reveals the need for better bounding methods, as available with conventional DCOP solvers.

identification of agentsâ€™ preferences will be necessary.
->
identification of the preferences of the agents will be necessary.

The effective methods need more ncops than basic methods.
-> (?)
Advanced methods need more ncops than basic methods.

Table 2 shows the size of pseudo trees. 
->
Table 2 shows the size of the pseudo trees. 

number of agents without Xdcd. 
->
number of agents with an empty Xdcd. 

this redundancy revealing the objective functions of the agents
->
this redundancy by revealing the objective functions of the agents

Table 3 shows the size of vectors.
->
Table 3 shows the size of the vectors.

representation of vectors are relatively less than the length (len.) of vectors in the case
->
representation of the vectors is relatively less than the length (len.) of the vectors in the case

In these results, the number of enumerating values to compare two vectors
-> (? not clear)


page 15:
The table shows several properties.
-> (delete)

resource allocation problems similar to this study
->
resource allocation problems similar to ones in this study

While related usage of the Theil based social welfare has
->
While a related usage of the Theil based social welfare has

while we generalized the common computation on pseudo trees.
->
while here we generalize the common computation to pseudo trees.

For this issue, more aggressive modifications of graphs
->
To address this issue, more aggressive modifications of the graphs

to reduce redundant copulation
-> (?)
to reduce redundant computations



*/